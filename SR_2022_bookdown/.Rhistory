#define grid
p_grid <- seq(from = 0, to = 1, length.out = 20)
prior <- exp(-5*abs(p_grid - 0.5))
#compute likelihood at each value in the grid
likelihood <- dbinom(6 , size = 9, prob = p_grid)
#compute product of likelihood and prior
unstd.posterior <- likelihood * prior
#standardize posterior so it sums to 1
posterior <- unstd.posterior / sum(unstd.posterior)
plot(p_grid, posterior, type = 'b',
xlab = "probability of water", ylab = "posterior probability")
mtext("20 points")
library(rethinking)
globe.qa <- quap(
alist(
W ~ dbinom(W+L, p) , #binomial likelihood
p ~ dunif(0,1) #uniform prior
) ,
data = list(W=6, L=3) )
#display the summary of the quadratic approximation
precis(globe.qa)
#analytical calculation
W <- 6
L <- 3
curve( dbeta(x , W+1, L+1), from = 0, to = 1)
#quadratic calculation
curve( dnorm(x, 0.67, 0.16), lty = 2, add = TRUE)
library(dplyr)
library(ggplot2)
library(stringr)
n_grid <- 100
tibble(p_grid                  = seq(from = 0, to = 1, length.out = n_grid) %>% rep(., times = 3),
prior                   = 1,
w                       = rep(c(6, 12, 24), each = n_grid),
n                       = rep(c(9, 18, 36), each = n_grid),
m                       = .67,
s                       = rep(c(.16, .11, .08), each = n_grid)) %>%
mutate(likelihood            = dbinom(w, size = n, prob = p_grid)) %>%
mutate(unstd_grid_posterior  = likelihood * prior,
unstd_quad_posterior  = dnorm(p_grid, m, s)) %>%
group_by(w) %>%
mutate(grid_posterior        = unstd_grid_posterior / sum(unstd_grid_posterior),
quad_posterior        = unstd_quad_posterior / sum(unstd_quad_posterior),
n = str_c("n = ", n)) %>%
mutate(n = factor(n, levels = c("n = 9", "n = 18", "n = 36"))) %>%
ggplot(aes(x = p_grid)) +
geom_line(aes(y = grid_posterior), color = "blue") +
geom_line(aes(y = quad_posterior),
color = "black") +
labs(x = "proportion water",
y = "density") +
theme(panel.grid = element_blank()) +
facet_wrap(~n, scales = "free")
n_samples <- 1000
p <- rep(NA, n_samples)
p[1] <- 0.5
W <- 6
L <- 3
for(i in 2:n_samples){
p_new <- rnorm(1, p[i-1], 0.1)
if(p_new < 0) p_new <- abs(p_new)
if(p_new > 1) p_new <- 2 - p_new
q0 <- dbinom(W, W+L, p[i-1])
q1 <- dbinom(W, W+L, p_new)
p[i] <- ifelse(runif(1) < q1/q0, p_new, p[i-1])
}
#dens(p, xlim=c(0,1))
d <- density(p)
plot(d)
curve(dbeta(x, W+1, L+1), lty = 2, add = TRUE) #quadratic
library(brms)
data(cars)
m <- quap(
alist(
dist ~ dnorm(mu, sigma),
mu <- a + b*speed,
a ~ dnorm(0, 100),
b ~ dnorm(0, 10),
sigma ~ dexp(1)
), data = cars
)
set.seed(11)
post <- extract.samples(m) #pull samples from posterior
sppnames <- c("afarensis", "aricanus", "habilis","boisei","rudolfensis", "ergaster","sapiens")
brainvolcc <- c(438, 452, 612, 521, 752, 871, 1350)
masskg <- c(37.0, 35.5, 34.5, 41.5, 55.5, 61, 53.5)
d <- data.frame(species=sppnames, brain=brainvolcc, mass=masskg)
plot(d$mass, d$brain, xlab = 'body mass (kg)', ylab = 'brain volume (cc)')
text(d$mass[1]+2, d$brain[1], labels = d$species[1])
text(d$mass[2], d$brain[2] + 60, labels = d$species[2])
text(d$mass[3]+1.7, d$brain[3], labels = d$species[3])
text(d$mass[4]+1.7, d$brain[4], labels = d$species[4])
text(d$mass[5]+2.2, d$brain[5], labels = d$species[5])
text(d$mass[6]-2, d$brain[6], labels = d$species[6])
text(d$mass[7]+2, d$brain[7], labels = d$species[7])
d$mass_std <- (d$mass - mean(d$mass))/sd(d$mass)
d$brain_std <- d$brain / max(d$brain)
library(rethinking)
m7.1 <- quap(
alist(
brain_std ~ dnorm(mu, exp(log_sigma)),
mu <- a + b*mass_std,
a ~ dnorm(0, 0.5),
b ~ dnorm(0, 10),
log_sigma ~ dnorm(0, 1)
), data = d
)
m7.1_OLS <- lm(brain_std ~ mass_std, data = d)
post <- extract.samples(m7.1_OLS)
set.seed(11)
s <- sim(m7.1)
r <- apply(s, 2, mean) - d$brain_std
resid_var <- var2(r)
outcome_var <- var2(d$brain_std)
1 - resid_var/outcome_var
R2_is_bad <- function(quap_fit){
s <- sim(quap_fit, refresh = 0)
r <- apply(s, 2, mean) - d$brain_std
1 - var2(r)/var2(d$brain_std)
}
m7.2 <- quap(
alist(
brain_std ~ dnorm(mu, exp(log_sigma)),
mu <- a + b[1]*mass_std + b[2]*mass_std^2,
a ~ dnorm(0.5,1),
b ~ dnorm(0, 10),
log_sigma ~ dnorm(0, 1)
), data = d, start = list(b=rep(0,2))
)
m7.3 <- quap(
alist(
brain_std ~ dnorm(mu, exp(log_sigma)),
mu <- a + b[1]*mass_std + b[2]*mass_std^2 +
b[3]*mass_std^3,
a ~ dnorm(0.5,1),
b ~ dnorm(0, 10),
log_sigma ~ dnorm(0, 1)
), data = d, start = list(b = rep(0,3))
)
m7.4 <- quap(
alist(
brain_std ~ dnorm(mu, exp(log_sigma)),
mu <- a + b[1]*mass_std + b[2]*mass_std^2 +
b[3]*mass_std^3 + b[4]*mass_std^4,
a ~ dnorm(0.5,1),
b ~ dnorm(0, 10),
log_sigma ~ dnorm(0, 1)
), data = d, start = list(b = rep(0,4))
)
m7.5 <- quap(
alist(
brain_std ~ dnorm(mu, exp(log_sigma)),
mu <- a + b[1]*mass_std + b[2]*mass_std^2 +
b[3]*mass_std^3 + b[4]*mass_std^4 +
b[5]*mass_std^5,
a ~ dnorm(0.5,1),
b ~ dnorm(0, 10),
log_sigma ~ dnorm(0, 1)
), data = d, start = list(b = rep(0, 5))
)
sppnames <- c("afarensis", "aricanus", "habilis","boisei","rudolfensis", "ergaster","sapiens")
brainvolcc <- c(438, 452, 612, 521, 752, 871, 1350)
masskg <- c(37.0, 35.5, 34.5, 41.5, 55.5, 61, 53.5)
d <- data.frame(species=sppnames, brain=brainvolcc, mass=masskg)
plot(d$mass, d$brain, xlab = 'body mass (kg)', ylab = 'brain volume (cc)')
text(d$mass[1]+2, d$brain[1], labels = d$species[1])
text(d$mass[2], d$brain[2] + 60, labels = d$species[2])
text(d$mass[3]+1.7, d$brain[3], labels = d$species[3])
text(d$mass[4]+1.7, d$brain[4], labels = d$species[4])
text(d$mass[5]+2.2, d$brain[5], labels = d$species[5])
text(d$mass[6]-2, d$brain[6], labels = d$species[6])
text(d$mass[7]+2, d$brain[7], labels = d$species[7])
d$mass_std <- (d$mass - mean(d$mass))/sd(d$mass)
d$brain_std <- d$brain / max(d$brain)
library(rethinking)
m7.1 <- quap(
alist(
brain_std ~ dnorm(mu, exp(log_sigma)),
mu <- a + b*mass_std,
a ~ dnorm(0, 0.5),
b ~ dnorm(0, 10),
log_sigma ~ dnorm(0, 1)
), data = d
)
m7.1_OLS <- lm(brain_std ~ mass_std, data = d)
post <- extract.samples(m7.1_OLS)
set.seed(11)
s <- sim(m7.1)
r <- apply(s, 2, mean) - d$brain_std
resid_var <- var2(r)
outcome_var <- var2(d$brain_std)
1 - resid_var/outcome_var
R2_is_bad <- function(quap_fit){
s <- sim(quap_fit, refresh = 0)
r <- apply(s, 2, mean) - d$brain_std
1 - var2(r)/var2(d$brain_std)
}
m7.2 <- quap(
alist(
brain_std ~ dnorm(mu, exp(log_sigma)),
mu <- a + b[1]*mass_std + b[2]*mass_std^2,
a ~ dnorm(0.5,1),
b ~ dnorm(0, 10),
log_sigma ~ dnorm(0, 1)
), data = d, start = list(b=rep(0,2))
)
m7.3 <- quap(
alist(
brain_std ~ dnorm(mu, exp(log_sigma)),
mu <- a + b[1]*mass_std + b[2]*mass_std^2 +
b[3]*mass_std^3,
a ~ dnorm(0.5,1),
b ~ dnorm(0, 10),
log_sigma ~ dnorm(0, 1)
), data = d, start = list(b = rep(0,3))
)
m7.4 <- quap(
alist(
brain_std ~ dnorm(mu, exp(log_sigma)),
mu <- a + b[1]*mass_std + b[2]*mass_std^2 +
b[3]*mass_std^3 + b[4]*mass_std^4,
a ~ dnorm(0.5,1),
b ~ dnorm(0, 10),
log_sigma ~ dnorm(0, 1)
), data = d, start = list(b = rep(0,4))
)
m7.5 <- quap(
alist(
brain_std ~ dnorm(mu, exp(log_sigma)),
mu <- a + b[1]*mass_std + b[2]*mass_std^2 +
b[3]*mass_std^3 + b[4]*mass_std^4 +
b[5]*mass_std^5,
a ~ dnorm(0.5,1),
b ~ dnorm(0, 10),
log_sigma ~ dnorm(0, 1)
), data = d, start = list(b = rep(0, 5))
)
m7.6 <- quap(
alist(
brain_std ~ dnorm(mu,0.001),
mu <- a + b[1]*mass_std + b[2]*mass_std^2 +
b[3]*mass_std^3 + b[4]*mass_std^4 +
b[5]*mass_std^5 + b[6]*mass_std^6,
a ~ dnorm(0.5,1),
b ~ dnorm(0, 10)
), data = d, start = list(b = rep(0,6))
)
#set plot layout
par(mfrow = c(3,2))
brain_plot(m7.1)
brain_plot(m7.2)
brain_plot(m7.3)
brain_plot(m7.4)
brain_plot(m7.5)
brain_plot(m7.6)
par(mfrow=c(1,2))
brain_loo_plot(m7.1)
brain_loo_plot(m7.4)
Day <- as.character(1:10)
Prediction <- rep(c(1, 0.6), times = c(3, 7))
Observed <- rep(c(1, 0), times = c(3,7))
d <- rbind(Day, Prediction, Observed)
knitr::kable(d, 'html')
Prediction <- rep(0, 10)
d <- rbind(Day, Prediction, Observed)
knitr::kable(d, 'html')
CBC <- rep(c(-1, -0.6), times = c(3,7))
CTV <- rep(c(-5, 0), times = c(3,7))
d <- rbind(Day, Observed, CBC, CTV)
knitr::kable(d, "html")
p <- c(0.3, 0.7)
-sum(p*log(p))
p <- c(0.01, 0.99)
-sum(p*log(p))
p <- c(0.7, 0.15, 0.15)
-sum(p*log(p))
p1 <- 0.3
p2 <- 0.7
q1 <- seq(from = 0.01, to = 0.99, by = 0.01)
q2 <- (1 - q1)
d_kl <- (p1 * log(p1/q1)) + (p2 * log(p2/q2))
d <- data.frame(p1, p2, q1, q2, d_kl)
plot(x = d$q1, y = d$d_kl, type = 'n')
lines(d$q1, d$d_kl, col = 'blue', lwd = 2)
abline(v = 0.3, lty = 2)
text(x = 0.35, y = 2.2, label = 'q = p')
set.seed(11)
lppd(m7.1, n = 1e4)
set.seed(11)
logprob <- sim(m7.1, ll=TRUE, n = 1e4) #sampled LL as rows and observations as columns
n <- ncol(logprob) # seven observations
ns <- nrow(logprob) # 1e4 samples
f <- function(i){
log_sum_exp(logprob[,i]) - log(ns) # exp(i) then sums them, then takes log of sum and subtracts the log of sample number
}
(lppd <- sapply(1:n, f))
set.seed(11)
sapply(list(m7.1,m7.2,m7.3,m7.4,m7.5,m7.6), function(m) sum(lppd(m)))
sppnames <- c("afarensis", "aricanus", "habilis","boisei","rudolfensis", "ergaster","sapiens")
brainvolcc <- c(438, 452, 612, 521, 752, 871, 1350)
masskg <- c(37.0, 35.5, 34.5, 41.5, 55.5, 61, 53.5)
d <- data.frame(species=sppnames, brain=brainvolcc, mass=masskg)
plot(d$mass, d$brain, xlab = 'body mass (kg)', ylab = 'brain volume (cc)')
text(d$mass[1]+2, d$brain[1], labels = d$species[1])
text(d$mass[2], d$brain[2] + 60, labels = d$species[2])
text(d$mass[3]+1.7, d$brain[3], labels = d$species[3])
text(d$mass[4]+1.7, d$brain[4], labels = d$species[4])
text(d$mass[5]+2.2, d$brain[5], labels = d$species[5])
text(d$mass[6]-2, d$brain[6], labels = d$species[6])
text(d$mass[7]+2, d$brain[7], labels = d$species[7])
d$mass_std <- (d$mass - mean(d$mass))/sd(d$mass)
d$brain_std <- d$brain / max(d$brain)
library(rethinking)
m7.1 <- quap(
alist(
brain_std ~ dnorm(mu, exp(log_sigma)),
mu <- a + b*mass_std,
a ~ dnorm(0, 0.5),
b ~ dnorm(0, 10),
log_sigma ~ dnorm(0, 1)
), data = d
)
m7.1_OLS <- lm(brain_std ~ mass_std, data = d)
post <- extract.samples(m7.1_OLS)
set.seed(11)
s <- sim(m7.1)
r <- apply(s, 2, mean) - d$brain_std
resid_var <- var2(r)
outcome_var <- var2(d$brain_std)
1 - resid_var/outcome_var
R2_is_bad <- function(quap_fit){
s <- sim(quap_fit, refresh = 0)
r <- apply(s, 2, mean) - d$brain_std
1 - var2(r)/var2(d$brain_std)
}
m7.2 <- quap(
alist(
brain_std ~ dnorm(mu, exp(log_sigma)),
mu <- a + b[1]*mass_std + b[2]*mass_std^2,
a ~ dnorm(0.5,1),
b ~ dnorm(0, 10),
log_sigma ~ dnorm(0, 1)
), data = d, start = list(b=rep(0,2))
)
m7.3 <- quap(
alist(
brain_std ~ dnorm(mu, exp(log_sigma)),
mu <- a + b[1]*mass_std + b[2]*mass_std^2 +
b[3]*mass_std^3,
a ~ dnorm(0.5,1),
b ~ dnorm(0, 10),
log_sigma ~ dnorm(0, 1)
), data = d, start = list(b = rep(0,3))
)
m7.4 <- quap(
alist(
brain_std ~ dnorm(mu, exp(log_sigma)),
mu <- a + b[1]*mass_std + b[2]*mass_std^2 +
b[3]*mass_std^3 + b[4]*mass_std^4,
a ~ dnorm(0.5,1),
b ~ dnorm(0, 10),
log_sigma ~ dnorm(0, 1)
), data = d, start = list(b = rep(0,4))
)
m7.5 <- quap(
alist(
brain_std ~ dnorm(mu, exp(log_sigma)),
mu <- a + b[1]*mass_std + b[2]*mass_std^2 +
b[3]*mass_std^3 + b[4]*mass_std^4 +
b[5]*mass_std^5,
a ~ dnorm(0.5,1),
b ~ dnorm(0, 10),
log_sigma ~ dnorm(0, 1)
), data = d, start = list(b = rep(0, 5))
)
m7.6 <- quap(
alist(
brain_std ~ dnorm(mu,0.001),
mu <- a + b[1]*mass_std + b[2]*mass_std^2 +
b[3]*mass_std^3 + b[4]*mass_std^4 +
b[5]*mass_std^5 + b[6]*mass_std^6,
a ~ dnorm(0.5,1),
b ~ dnorm(0, 10)
), data = d, start = list(b = rep(0,6))
)
#set plot layout
par(mfrow = c(3,2))
brain_plot(m7.1)
brain_plot(m7.2)
brain_plot(m7.3)
brain_plot(m7.4)
brain_plot(m7.5)
brain_plot(m7.6)
par(mfrow=c(1,2))
brain_loo_plot(m7.1)
brain_loo_plot(m7.4)
Day <- as.character(1:10)
Prediction <- rep(c(1, 0.6), times = c(3, 7))
Observed <- rep(c(1, 0), times = c(3,7))
d <- rbind(Day, Prediction, Observed)
knitr::kable(d, 'html')
Prediction <- rep(0, 10)
d <- rbind(Day, Prediction, Observed)
knitr::kable(d, 'html')
CBC <- rep(c(-1, -0.6), times = c(3,7))
CTV <- rep(c(-5, 0), times = c(3,7))
d <- rbind(Day, Observed, CBC, CTV)
knitr::kable(d, "html")
p <- c(0.3, 0.7)
-sum(p*log(p))
p <- c(0.01, 0.99)
-sum(p*log(p))
p <- c(0.7, 0.15, 0.15)
-sum(p*log(p))
p1 <- 0.3
p2 <- 0.7
q1 <- seq(from = 0.01, to = 0.99, by = 0.01)
q2 <- (1 - q1)
d_kl <- (p1 * log(p1/q1)) + (p2 * log(p2/q2))
d <- data.frame(p1, p2, q1, q2, d_kl)
plot(x = d$q1, y = d$d_kl, type = 'n')
lines(d$q1, d$d_kl, col = 'blue', lwd = 2)
abline(v = 0.3, lty = 2)
text(x = 0.35, y = 2.2, label = 'q = p')
set.seed(11)
lppd(m7.1, n = 1e4)
set.seed(11)
logprob <- sim(m7.1, ll=TRUE, n = 1e4) #sampled LL as rows and observations as columns
n <- ncol(logprob) # seven observations
ns <- nrow(logprob) # 1e4 samples
f <- function(i){
log_sum_exp(logprob[,i]) - log(ns) # exp(i) then sums them, then takes log of sum and subtracts the log of sample number
}
(lppd <- sapply(1:n, f))
set.seed(11)
sapply(list(m7.1,m7.2,m7.3,m7.4,m7.5,m7.6), function(m) sum(lppd(m)))
n_sim <- 100 #number of simulations
kseq <- 1:5 #number of parameters in the model
#simulation function
my_sim <- function(k) {
r <- replicate(n_sim, sim_train_test(N=n, k = k));
c(mean(r[1,]), mean(r[2,]), sd(r[1,]), sd(r[2,]))
}
# run for 20 cases
n <- 20
dev_20 <- sapply(kseq, my_sim) # this will take a while
#standard linear model
data(cars)
m <- quap(
alist(
dist ~ dnorm(mu, sigma),
mu <- a + b*speed,
a ~ dnorm(0, 100),
b ~ dnorm(0, 10),
sigma ~ dexp(1)
), data = cars
)
set.seed(11)
post <- extract.samples(m, n = 1000) #pull samples from posterior
m <- quap(
alist(
dist ~ dnorm(mu, sigma),
mu <- a + b*speed,
a ~ dnorm(0, 100),
b ~ dnorm(0, 10),
sigma ~ dexp(1)
), data = cars
)
library(rethinking)
post <- extract.samples(m, n = 1000) #pull samples from posterior
#standard linear model
data(cars)
m <- quap(
alist(
dist ~ dnorm(mu, sigma),
mu <- a + b*speed,
a ~ dnorm(0, 100),
b ~ dnorm(0, 10),
sigma ~ dexp(1)
), data = cars
)
set.seed(11)
post <- extract.samples(m, n = 1000) #pull samples from posterior
# need to calculate likelihood for each observation
n_samples <- 1000
logprob <- sapply(1:n_samples,
function(s){
mu <- post$a[s] + post$b[s]*cars$speed
dnorm(cars$dist, mu, post$sigma[s], log = TRUE)
})
#calculate the lppd
n_cases <- nrow(cars) #number of observations
lppd <- sapply(1:n_cases, function(i) log_sum_exp(logprob[i,]) - log(n_samples))
#penalty term in WAIC
pWAIC <- sapply(1:n_cases, function(i) var(logprob[i,]))
-2*(sum(lppd) - sum(pWAIC))
#compare to automatic function
WAIC(m)
#calculate the standard error of the WAIC for yourself
waic_vec <- -2*(lppd - pWAIC)
sqrt(n_cases*var(waic_vec))
n_sim <- 100 #number of simulations
kseq <- 1:5 #number of parameters in the model
#simulation function
my_sim <- function(k) {
r <- replicate(n_sim, sim_train_test(N=n, k = k));
c(mean(r[1,]), mean(r[2,]), sd(r[1,]), sd(r[2,]))
}
# run for 20 cases
n <- 20
dev_20 <- sapply(kseq, my_sim) # this will take a while
rm(list=ls())
